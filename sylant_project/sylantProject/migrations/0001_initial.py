# Generated by Django 5.0.6 on 2024-05-21 11:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('client', 'Client'), ('service', 'Service Organization'), ('manager', 'Manager')], max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_set', related_query_name='customuser', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', related_query_name='customuser', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('engine_serial_number', models.CharField(max_length=100)),
                ('transmission_serial_number', models.CharField(max_length=100)),
                ('drive_axle_serial_number', models.CharField(max_length=100)),
                ('steering_axle_serial_number', models.CharField(max_length=100)),
                ('delivery_contract', models.CharField(max_length=200)),
                ('shipment_date', models.DateField()),
                ('consignee', models.CharField(max_length=200)),
                ('delivery_address', models.CharField(max_length=300)),
                ('configuration', models.TextField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_machines', to=settings.AUTH_USER_MODEL)),
                ('service_company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_machines', to=settings.AUTH_USER_MODEL)),
                ('drive_axle_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drive_axle_models', to='sylantProject.reference')),
                ('engine_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='engine_models', to='sylantProject.reference')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='machines', to='sylantProject.reference')),
                ('steering_axle_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steering_axle_models', to='sylantProject.reference')),
                ('transmission_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transmission_models', to='sylantProject.reference')),
            ],
        ),
        migrations.CreateModel(
            name='Maintenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('maintenance_date', models.DateField()),
                ('machine_hours', models.PositiveIntegerField()),
                ('order_number', models.CharField(max_length=100)),
                ('order_date', models.DateField()),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenances', to='sylantProject.machine')),
                ('service_company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_service_companies', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_companies', to='sylantProject.reference')),
                ('maintenance_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_types', to='sylantProject.reference')),
            ],
        ),
        migrations.CreateModel(
            name='Claim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('failure_date', models.DateField()),
                ('machine_hours', models.PositiveIntegerField()),
                ('failure_description', models.TextField()),
                ('spare_parts', models.TextField()),
                ('recovery_date', models.DateField()),
                ('downtime', models.PositiveIntegerField()),
                ('service_company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claim_service_companies', to=settings.AUTH_USER_MODEL)),
                ('machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to='sylantProject.machine')),
                ('failure_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='failure_units', to='sylantProject.reference')),
                ('recovery_method', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recovery_methods', to='sylantProject.reference')),
            ],
        ),
    ]
